name: Publish SPM Package - XCFramework
on:
  push:
    branches:
      - 'release/[0-9]*.[0-9]*.[0-9]*'  # Matches release/X.Y.Z
      - 'release/[0-9]*.[0-9]*.[0-9]*-*'  # Matches release/X.Y.Z-ALPHA01, etc.
jobs:
  build-and-release:
    name: Build XCFramework and Release
    runs-on: macos-latest
    permissions:
      contents: write  # Required for creating releases and pushing changes
      packages: write  # Required for uploading release assets
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed for git commands to work properly
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: 21
        cache: 'gradle'
    - name: Set up Gradle
      uses: gradle/gradle-build-action@v2
      with:
        gradle-home-cache-cleanup: true
    - name: Extract version from branch name
      id: version
      run: |
        # Extract version from branch name (e.g., release/1.2.3-ALPHA01 -> 1.2.3-ALPHA01)
        VERSION=${GITHUB_REF#refs/heads/release/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        # For tag version, only add 'v' prefix if it's a stable version (no pre-release)
        if [[ "$VERSION" == *-* ]]; then
          echo "TAG_VERSION=refs/tags/$VERSION" >> $GITHUB_ENV
        else
          echo "TAG_VERSION=refs/tags/v$VERSION" >> $GITHUB_ENV
        fi
    
    - name: Build XCFramework
      run: |
        ./gradlew :shared:assembleKvsStorageXCFramework
        
        # Create a directory for the release
        mkdir -p release
        
        # Move and rename the XCFramework
        mv shared/build/XCFrameworks/release/*.xcframework release/
        
        # Create a zip file
        cd release
        zip -r KvsStorage-${{ steps.version.outputs.version }}.xcframework.zip ./*.xcframework
        cd ..
    
    - name: Calculate checksum
      id: checksum
      run: |
        cd release
        CHECKSUM=$(swift package compute-checksum KvsStorage-${{ steps.version.outputs.version }}.xcframework.zip)
        echo "checksum=$CHECKSUM" >> $GITHUB_OUTPUT
        echo "CHECKSUM=$CHECKSUM" >> $GITHUB_ENV
    
    - name: Check if version is pre-release
      id: check-prerelease
      run: |
        # Check if version contains a hyphen (e.g., 1.0.0-ALPHA03)
        if [[ "${{ steps.version.outputs.version }}" == *-* ]]; then
          echo "is_prerelease=true" >> $GITHUB_OUTPUT
        else
          echo "is_prerelease=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag: ${{ env.TAG_VERSION }}
        name: Release ${{ steps.version.outputs.version }}
        draft: false
        prerelease: ${{ steps.check-prerelease.outputs.is_prerelease }}
        files: |
          ./release/KvsStorage-${{ steps.version.outputs.version }}.xcframework.zip
    
        # Asset upload is now handled by softprops/action-gh-release
    
    - name: Update Package.swift
      run: |
        # Clone the package repository if it's different from the current one
        # git clone https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/your-org/your-package-repo.git
        # cd your-package-repo
        
        # Create or update Package.swift
        cat > Package.swift << 'EOF'
        // swift-tools-version:5.3
        import PackageDescription

        let package = Package(
            name: "KvsStorage",
            platforms: [
                .iOS(.v14),
            ],
            products: [
                .library(
                    name: "KvsStorage",
                    targets: ["KvsStorage"]
                ),
            ],
            targets: [
                .binaryTarget(
                    name: "KvsStorage",
                    url: "https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/KvsStorage-${{ steps.version.outputs.version }}.xcframework.zip",
                    checksum: "${{ steps.checksum.outputs.checksum }}"
                )
            ]
        )
        EOF
        
        # Configure git
        git config --global user.name 'GitHub Action'
        git config --global user.email 'action@github.com'
        
        # Check if there are changes to commit
        if ! git diff --exit-code Package.swift > /dev/null; then
            git add Package.swift
            git commit -m "Update to version ${{ steps.version.outputs.version }}"
            git push
        else
            echo "No changes to commit"
        fi
