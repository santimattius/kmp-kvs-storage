name: Publish SPM Package - XCFramework

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'  # Matches semantic version tags like v1.0.0
      - 'v[0-9]+.[0-9]+.[0-9]+-*' # Matches pre-release versions like v1.0.0-beta.1

jobs:
  build-and-release:
    name: Build XCFramework and Release
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed for git commands to work properly
    
    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        cache: 'gradle'
    
    - name: Set up Gradle
      uses: gradle/gradle-build-action@v2
      with:
        gradle-home-cache-cleanup: true
    
    - name: Extract version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "TAG_VERSION=$GITHUB_REF" >> $GITHUB_ENV
    
    - name: Build XCFramework
      run: |
        ./gradlew :shared:assembleXCFramework
        
        # Create a directory for the release
        mkdir -p release
        
        # Move and rename the XCFramework
        mv shared/build/XCFrameworks/release/*.xcframework release/
        
        # Create a zip file
        cd release
        zip -r KvsStorage-${{ steps.version.outputs.version }}.xcframework.zip ./*.xcframework
        cd ..
    
    - name: Calculate checksum
      id: checksum
      run: |
        cd release
        CHECKSUM=$(swift package compute-checksum KvsStorage-${{ steps.version.outputs.version }}.xcframework.zip)
        echo "checksum=$CHECKSUM" >> $GITHUB_OUTPUT
        echo "CHECKSUM=$CHECKSUM" >> $GITHUB_ENV
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.TAG_VERSION }}
        release_name: Release ${{ steps.version.outputs.version }}
        draft: false
        prerelease: false
    
    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release/KvsStorage-${{ steps.version.outputs.version }}.xcframework.zip
        asset_name: KvsStorage-${{ steps.version.outputs.version }}.xcframework.zip
        asset_content_type: application/zip
    
    - name: Update Package.swift
      run: |
        # Clone the package repository if it's different from the current one
        # git clone https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/your-org/your-package-repo.git
        # cd your-package-repo
        
        # Create or update Package.swift
        cat > Package.swift << 'EOF'
        // swift-tools-version:5.3
        import PackageDescription

        let package = Package(
            name: "KvsStorage",
            platforms: [
                .iOS(.v14),
            ],
            products: [
                .library(
                    name: "KvsStorage",
                    targets: ["KvsStorage"]
                ),
            ],
            targets: [
                .binaryTarget(
                    name: "KvsStorage",
                    url: "https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/KvsStorage-${{ steps.version.outputs.version }}.xcframework.zip",
                    checksum: "${{ steps.checksum.outputs.checksum }}"
                )
            ]
        )
        EOF
        
        # Configure git
        git config --global user.name 'GitHub Action'
        git config --global user.email 'action@github.com'
        
        # Check if there are changes to commit
        if ! git diff --exit-code Package.swift > /dev/null; then
            git add Package.swift
            git commit -m "Update to version ${{ steps.version.outputs.version }}"
            git push
        else
            echo "No changes to commit"
        fi
